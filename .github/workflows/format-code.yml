name: 'Format code'

on:
  issue_comment:
    types: [created]

jobs:
  format:
    name: 'Format code'
    runs-on: ubuntu-latest
    if: github.event.issue.pull_request != '' && contains(github.event.comment.body, '/format')
    steps:
      - name: 'Download PR data'
        run: |
          PR_DATA="/tmp/pr.json"
          
          jq -r ".issue.pull_request.url" "$GITHUB_EVENT_PATH" | \
            xargs curl --header 'authorization: Bearer ${{ secrets.GITHUB_TOKEN }}' -o "$PR_DATA" --url

      - name: 'Check fork status'
        id: fork_status
        run: |
          IS_FORK="$(jq '.head.repo.fork' "/tmp/pr.json")"
          echo "::set-output name=fork::$IS_FORK"

      - name: 'Setup SSH deploy key'
        if: steps.fork_status.outputs.fork == 'false'
        run: |
          mkdir ~/.ssh
          echo "${{ secrets.DEPLOY_KEY }}" > ~/.ssh/id_ed25519
          chmod 600 ~/.ssh/id_ed25519

      - name: 'Checkout code'
        run: |
          PR_DATA="/tmp/pr.json"

          HEAD_REF=$(jq -r ".head.ref" "$PR_DATA")
          
          if [ ${{ steps.fork_status.outputs.fork }} == "false" ]; then
            echo "::debug::Setting up repo using SSH"
            HEAD_REPO=$(jq -r '.head.repo.ssh_url' "$PR_DATA")
          else
            echo "::debug::Setting up repo using HTTPS"
            HEAD_REPO=$(jq -r '.head.repo.clone_url | sub("https://"; "https://x-access-token:${{ secrets.GITHUB_TOKEN }}@")' "$PR_DATA")
          fi

          git clone $HEAD_REPO .
          git checkout -b "$HEAD_REF" "origin/$HEAD_REF"

      - name: 'Format code'
        run: |
          # Use prettier to format the added or modified Markdown files in the PR (if any)
          jq -r '.issue.pull_request.url | . += "/files"' "$GITHUB_EVENT_PATH" | \
            xargs curl --header 'authorization: Bearer ${{ secrets.GITHUB_TOKEN }}' --url | \
            jq -c '.[] | select(.status == "added" or .status == "modified") | select(.filename | match("\\.(md|json)$")) | .filename' | \
            xargs npx prettier@2.0.4 --write

      - name: 'Commit formatted code'
        run: |
          # Check if there is nothing to commit (i.e. no formatting changes made)
          if [ -z "$(git status --porcelain)" ]; then
            echo "Code is already formatted correctly"
            exit 0
          fi

          # Setup the git user (required to commit anything)
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git config --global user.name "github-actions[bot]"

          # Commit the changes made by prettier
          git add .
          git commit -m "[CI] Format code"
          git push
      
      - name: 'Post reminder to trigger build manually'
        continue-on-error: true # Never fail the build if this fails
        if: steps.fork_status.outputs.fork == 'true'
        uses: actions/github-script@6e5ee1dc1cb3740e5e5e76ad668e3f526edbfe45 # 2.0.0
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            github.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: 'For security reasons, `/format` does not trigger CI build when the PR has been submitted from a fork. To make the required checks pass, you need to trigger a build through one of the following ways:\n\n- Push an empty commit to this branch: `git commit --allow-empty -m "Trigger builds"`.\n- Close and reopen the PR.\n- Push a regular commit to this branch.'
            })
